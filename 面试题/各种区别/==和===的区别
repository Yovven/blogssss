参考：
https://wangdoc.com/javascript/operators/comparison.html#%E9%9D%9E%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83

truly和falsely的定义（Vue中v-for和v-if的判断条件）：
经过两次非运算为true的为truly变量，反之则为falsely

一.JavaScript 一共提供了8个比较运算符：
> 大于运算符
< 小于运算符
<= 小于或等于运算符
>= 大于或等于运算符
== 相等运算符
=== 严格相等运算符
!= 不相等运算符
!== 严格不相等运算符
这八个比较运算符分成两类：相等比较和非相等比较。两者的规则是不一样的。
对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；
否则，将两个运算子都转成数值，再比较数值的大小。


二.JavaScript 提供两种相等运算符：==和===。 先比类型再比值。
简单说，它们的区别是相等运算符（==）比较两个值是否相等，严格相等运算符（===）比较它们是否为“同一个值”。
如果两个值是同一类型，那么两者的比较算法是一样。
如果两个值不是同一类型，严格相等运算符（===）直接返回false，而相等运算符（==）会将它们转换成同一个类型，再用严格相等运算符进行比较。


三。严格相等运算符的算法：
（1）不同类型的值
如果两个值的类型不同，直接返回false。
    1 === "1" // false
    true === "true" // false
（2）同一类的原始类型值
同一类型的原始类型的值（数值、字符串、布尔值）比较时，值相同就返回true，值不同就返回false。
需要注意的是，NaN与任何值都不相等（包括自身）。另外，正0等于负0。
    NaN === NaN  // false
    +0 === -0 // true
（3）复合类型值
两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。（复合类型的变量指向的内存中存的是复合数据结构的指针。）
注意，对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值。
（4）undefined 和 null
undefined和null与自身严格相等。


四.相等运算符的算法：
相等运算符用来比较相同类型的数据时，与严格相等运算符完全一样。
比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。
转换规则：
（1）原始类型值
原始类型的值会转换成数值再进行比较。
（2）对象与原始类型值比较
对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，对象转换成原始类型的值，再进行比较。
具体来说，先调用对象的valueOf()方法，如果得到原始类型的值，就按照上一小节的规则，互相比较；如果得到的还是对象，则再调用toString()方法，得到字符串形式，再进行比较。
    // 数组与数值的比较
    [1] == 1 // true
    // 数组与字符串的比较
    [1] == '1' // true
    [1, 2] == '1,2' // true
    // 对象与布尔值的比较
    [1] == true // true
    [2] == true // false   [2].tostring()=='2'  Number('2') = 2  Number(true) = 1

（3）undefined 和 null
undefined和null只有与自身比较，或者互相比较时，才会返回true；与其他类型的值比较时，结果都为false。

    undefined == undefined // true
    null == null // true
    undefined == null // true
    false == null // false
    false == undefined // false
    0 == null // false
    0 == undefined // false

（4）相等运算符的缺点
相等运算符隐藏的类型转换，会带来一些违反直觉的结果。
    0 == ''             // true
    0 == '0'            // true

    2 == true           // false
    2 == false          // false

    false == 'false'    // false
    false == '0'        // true

    false == undefined  // false
    false == null       // false
    null == undefined   // true

    ' \t\r\n ' == 0     // true


五.
严格不相等运算符和不相等运算符都是先用对应相等的算法进行比较，再将比较结果取反。